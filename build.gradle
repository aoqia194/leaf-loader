import dev.aoqia.leaf.loom.build.nesting.JarNester
import org.slf4j.LoggerFactory

buildscript {
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.5.0'
	}
}

plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
	id 'maven-publish'
	id 'com.diffplug.spotless' version "6.22.0"
	id 'dev.aoqia.leaf.loom' version '0.3.2' apply false
	id 'com.gradleup.shadow' version '8.3.6'
    // Releasing to maven central via sonatype
    id 'org.jreleaser' version '1.17.0'
}

base {
	archivesName = project.name
}

def ENV = System.getenv()

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'eclipse'
	apply plugin: 'com.diffplug.spotless'

	def constantsSource = rootProject.file("src/main/java/dev/aoqia/leaf/loader/impl/LeafLoaderImpl.java").text
	version = (constantsSource =~ /\s+VERSION\s*=\s*"(.*)";/)[0][1] + (ENV.GITHUB_ACTIONS ? "" : ".local")

	repositories {
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		mavenCentral() {
			content {
				// Force ASM to come from the fabric maven.
				// This ensures that the version has been mirrored for use by the launcher/installer.
				excludeGroupByRegex "org.ow2.asm"
			}
		}
	}

	dependencies {
		compileOnly 'org.jetbrains:annotations:23.0.0'
	}
}

sourceSets {
	main {
		java.srcDirs = ['src/main/java', 'src/main/legacyJava']
	}
	java17
}

configurations {
	include {
		transitive = false
	}

	implementation {
		extendsFrom include
	}

	installer {
		transitive = false
	}
	development {
		transitive = false
        visible = false
	}

	api {
		extendsFrom installer
		// extendsFrom development
	}
}

dependencies {
	// leaf-loader dependencies
	installer "org.ow2.asm:asm:${asm_version}"
	installer "org.ow2.asm:asm-analysis:${asm_version}"
	installer "org.ow2.asm:asm-commons:${asm_version}"
	installer "org.ow2.asm:asm-tree:${asm_version}"
	installer "org.ow2.asm:asm-util:${asm_version}"
	installer "net.fabricmc:sponge-mixin:${mixin_version}"

	// impl dependencies
	include 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.6'
	include 'org.ow2.sat4j:org.ow2.sat4j.pb:2.3.6'
	include "net.fabricmc:tiny-remapper:0.10.4"
	include "net.fabricmc:access-widener:2.1.0"
	include ('net.fabricmc:mapping-io:0.5.0') {
		// Mapping-io depends on ASM, dont bundle
		transitive = false
	}

    // We JiJ this into the launcher jar directly! (thanks llamalad7 for the help)
    development(project(path: ':mixinextras-leaf', configuration: 'shadow'))

	testCompileOnly 'org.jetbrains:annotations:23.0.0'

	// Unit testing for mod metadata
	testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
	testRuntimeOnly('org.junit.platform:junit-platform-launcher')

	testImplementation("org.mockito:mockito-core:5.10.0")
}

apply from: rootProject.file('gradle/installer-json.gradle')

processResources {
	inputs.property "version", project.version

	filesMatching("leaf.mod.json") {
		expand "version": project.version.toString().replace('.local', '')
	}
}

java {
	withSourcesJar()
    // Added separately for some reason..
//    withJavadocJar()
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	enabled = false
	// Set the classifier to fix gradle task validation confusion.
	archiveClassifier = "disabled"
}

test {
	useJUnitPlatform()
}

shadowJar {
	// Has stupid defaults, make our own
	enabled = false
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/**
 * A task to get the raw loader version, used for GitHub workflows.
 */
tasks.register('getLoaderVersion') {
    print version
}

// Renaming in the shadow jar task doesnt seem to work, so do it here
tasks.register('getSat4jAbout', Copy) {
	dependsOn project.configurations.include
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.include.collect {
			zipTree(it).matching {
				include 'about.html'
			}
		}
	}

	rename 'about.html', 'dev/aoqia/leaf/loader/impl/lib/sat4j/about-sat4j.html'

	into layout.buildDirectory.dir("sat4j")
}

tasks.register('fatJar', ShadowJar) {
    dependsOn(':mixinextras-leaf:shadowJar')
	dependsOn getSat4jAbout

	from sourceSets.main.output
	from project(":zomboid").sourceSets.main.output
	from getSat4jAbout.destinationDir
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}

	manifest {
		attributes(
			'Main-Class': 'dev.aoqia.leaf.loader.impl.launch.server.LeafServerLauncher',
			'Leaf-Loom-Remap': 'false',
			'Automatic-Module-Name': 'dev.aoqia.leaf.loader',
			'Multi-Release': 'true'
		)
	}

	archiveClassifier = "fat"
	configurations = [project.configurations.include]

	relocate 'org.sat4j', 'dev.aoqia.leaf.loader.impl.lib.sat4j'
	relocate 'net.fabricmc.accesswidener', 'dev.aoqia.leaf.loader.impl.lib.accesswidener'
	relocate 'net.fabricmc.tinyremapper', 'dev.aoqia.leaf.loader.impl.lib.tinyremapper'
	relocate 'net.fabricmc.mappingio', 'dev.aoqia.leaf.loader.impl.lib.mappingio'

	exclude 'about.html'
	exclude 'sat4j.version'
	exclude 'META-INF/maven/org.ow2.sat4j/*/**'
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.SF'

	doLast {
		JarNester.nestJars(project.configurations.development.files,
            archiveFile.get().asFile,
            LoggerFactory.getLogger("JiJ"))
	}

	outputs.upToDateWhen { false }
}

File proguardTmpFile = file("build/tmp/loader-${version}.jar")

import proguard.gradle.ProGuardTask

tasks.register('proguardJar', ProGuardTask) {
	dependsOn fatJar
	def classpath = project(":zomboid").configurations.compileClasspath

	inputs.files(fatJar, classpath)
	outputs.files(proguardTmpFile)

	doFirst {
		classpath.resolve().forEach {
			libraryjars it
		}
	}

	def java8 = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(8)
	}.get()
	libraryjars java8.metadata.installationPath.file("jre/lib/rt.jar")

	injars fatJar.archiveFile
	outjars proguardTmpFile
	configuration file("proguard.conf")
}

// As proguard does not support MRJ's we must add the MRJ classes to the final jar
// Use a Zip task to not alter the manifest
tasks.register('finalJar', Zip) {
	from zipTree(proguardTmpFile)
	dependsOn(proguardJar)
	into('META-INF/versions/17') {
		from sourceSets.java17.output
	}
	destinationDirectory = file("build/libs")
	archiveExtension = "jar"
}

build.dependsOn finalJar

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

sourcesJar {
	from sourceSets.main.allSource
	from project(":zomboid").sourceSets.main.allSource
}

// useful for creating test mod jar
tasks.register('testJar', Jar) {
	archiveClassifier = "test"
	from sourceSets.test.output
}

tasks.register('copyJson') {
	def inJson = file('src/main/resources/leaf-installer.json')
	def outJson = file("build/libs/${project.base.archivesName.get()}-${version}.json")

	inputs.files(inJson)
	outputs.files(outJson)

	doLast {
		outJson.text = inJson.text
	}
}

build.dependsOn 'copyJson'

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = it.name.contains("Java17") ? 17 : 8
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://logging.apache.org/log4j/2.x/javadoc/log4j-api/'
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError false
}

tasks.register('javadocJar', Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	archiveClassifier = 'javadoc'
}

build.dependsOn javadocJar

allprojects {
	spotless {
		java {
			licenseHeaderFile(rootProject.file("HEADER"))
			targetExclude '**/lib/gson/*.java'
		}
	}
}

// Causes more trouble than its worth
tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

publishing {
	publications {
		register("maven", MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version

            pom {
                name = rootProject.name
                group = rootProject.group
                description = rootProject.description
                url = rootProject.url
                inceptionYear = '2025'
                developers {
                    developer {
                        id = 'aoqia'
                        name = 'aoqia'
                    }
                }
                issueManagement {
                    system = 'GitHub'
                    url = "${rootProject.url}/issues"
                }
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/aoqia194/leaf-" + project.name + "/.git"
                    developerConnection = "scm:git:ssh://github.com/aoqia194/leaf-" + project.name + "/.git"
                    url = rootProject.url
                }
            }

            artifact finalJar
			artifact sourcesJar
			artifact javadocJar
			artifact(file('src/main/resources/leaf-installer.json')) {
				builtBy copyJson
			}
		}
	}

	repositories {
		maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
	}
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	return "unknown"
}

// A task to ensure that the version being released has not already been released.
tasks.register('checkVersion') {
    doFirst {
        def xml = new URL(
            "https://repo.maven.apache.org/maven2/dev/aoqia/leaf/loader/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text();
        if (versions.contains(version)) {
            throw new RuntimeException("${version} has already been released!")
        }
    }
}
publish.mustRunAfter checkVersion

jreleaser {
    project {
        name = rootProject.name
        version = rootProject.version
        versionPattern = 'SEMVER'
        authors = ['aoqia194', 'FabricMC']
        maintainers = ['aoqia194']
        license = 'Apache-2.0'
        inceptionYear = '2025'
        links {
            homepage = rootProject.url
            license = 'https://spdx.org/licenses/Apache-2.0.html'
        }
    }
    signing {
        active = 'ALWAYS'
        armored = true
        passphrase = ENV.GPG_PASSPHRASE_KEY
        publicKey = ENV.GPG_PUBLIC_KEY
        secretKey = ENV.GPG_PRIVATE_KEY
    }
    deploy {
        maven {
            pomchecker {
                version = "1.14.0"
                failOnWarning = false // annoying
                failOnError = true
                strict = true
            }
            mavenCentral {
                sonatype {
                    applyMavenCentralRules = true
                    active = "ALWAYS"
                    snapshotSupported = true
                    authorization = 'BEARER'
                    username = ENV.MAVEN_USERNAME
                    password = ENV.MAVEN_PASSWORD
                    url = "https://central.sonatype.com/api/v1/publisher"
                    stagingRepository("build/staging-deploy")
                    verifyUrl = "https://repo1.maven.org/maven2/{{path}}/{{filename}}"
                    namespace = rootProject.group
                    retryDelay = 60
                    maxRetries = 30
                }
            }
        }
    }

    release {
        github {
            enabled = true
            repoOwner = 'aoqia194'
            name = 'leaf-loader'
            host = 'github.com'
            releaseName = '{{tagName}}'
            sign = true
            overwrite = true

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                extraProperties.put('categorizeScopes', 'true')
            }
        }
    }
}
