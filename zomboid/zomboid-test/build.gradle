apply plugin: "leaf-loom"

loom {
    clientOnlyZomboidJar()

    runConfigs.configureEach {
        ideConfigGenerated = true
        property("leaf.debug.replaceVersion", "leafloader:$version")
    }
}

def zomboid_version = "41.78.16"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    zomboid "com.theindiestone:zomboid:${zomboid_version}"
    mappings "dev.aoqia:leaf-yarn:${zomboid_version}+build.local:v2"

    implementation project(":zomboid")
    implementation project(":zomboid").sourceSets.main.output
    implementation project(":").sourceSets.main.output

    // Required for mixin annotation processor
    annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"

    //    annotationProcessor("net.fabricmc:sponge-mixin:${project.mixin_version}") {
    //        exclude module: 'guava'
    //    }
    //    annotationProcessor "io.github.llamalad7:mixinextras-common:$mixin_extras_version"

    testImplementation project(":junit")
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}


import groovy.json.JsonSlurper
import dev.aoqia.loom.util.Platform

configurations {
    productionRuntime {
        extendsFrom configurations.zomboidLibraries
        extendsFrom configurations.loaderLibraries
        extendsFrom configurations.zomboidRuntimeLibraries
    }
    productionRuntimeMods {
        transitive = false
    }
}

dependencies {
    // Include the external libraries on the classpath
    def installerJson = new JsonSlurper().parse(rootProject.file("src/main/resources/leaf-installer.json"))
    installerJson.libraries.common.each {
        productionRuntime it.name
    }

    // Use Fabric's auto client test
    //	productionRuntimeMods "dev.aoqia.fabric-api:fabric-api:0.89.3+1.20.2"
    //	productionRuntimeMods "dev.aoqia.fabric-api:fabric-api:0.89.3+1.20.2:testmod"
}

def loaderJarTask = project(":").tasks.finalJar

// This is very far beyond loom's API if you copy this, you're on your own.
//task runProductionAutoTestClient(type: JavaExec, dependsOn: [loaderJarTask, remapJar]) {
task runProductionAutoTestClient(type: JavaExec, dependsOn: [loaderJarTask]) {
    classpath.from configurations.productionRuntime
    classpath.from loaderJarTask
    mainClass = "dev.aoqia.leaf.loader.impl.launch.knot.KnotClient"

    // Let loom set it instead.
//    workingDir = file("run")

    afterEvaluate {
        //		dependsOn downloadAssets
    }

    doFirst {
        classpath.from loom.zomboidProvider.zomboidClientJar
        workingDir.mkdirs()

        if (Platform.CURRENT.operatingSystem.isMacOS()) {
            jvmArgs(
                "-XstartOnFirstThread"
            )
        }

        def modFiles = []
        modFiles.addAll configurations.productionRuntimeMods.files
        modFiles.add remapJar.archiveFile.get().asFile
        def mods = modFiles.join(File.pathSeparator)

        jvmArgs(
            "-Dleaf.addMods=${mods}",
            "-Dleaf.autoTest"
        )
    }
}
